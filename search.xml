<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>部署SOCKS5代理服务器</title>
      <link href="/2024/11/22/%E9%83%A8%E7%BD%B2SOCKS5%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2024/11/22/%E9%83%A8%E7%BD%B2SOCKS5%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="部署SOCKS5代理服务器"><a href="#部署SOCKS5代理服务器" class="headerlink" title="部署SOCKS5代理服务器"></a>部署SOCKS5代理服务器</h1><blockquote><p>尝试一些更复杂的实现</p></blockquote><ul><li>对于不熟悉的函数，善用<a href="https://pkg.go.dev/">官方文档</a>，这是你了解函数最正规最详细的地方</li></ul><hr><h2 id="SOCKS5-简介"><a href="#SOCKS5-简介" class="headerlink" title="SOCKS5 简介"></a>SOCKS5 简介</h2><p>SOCKS5 是一个传输层代理协议，主要用于通过中间代理服务器来转发客户端和目标  服务器之间的网络通信。它并不关心数据的具体内容，只负责将数据从一个网络位置转发到另一个网络位置。与 HTTP 代理相比，SOCKS5 可以处理任何协议的流量，包括 HTTP、FTP、SMTP、POP3 等。<img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1731740637/SOCKS5%E5%8E%9F%E7%90%86_oqqio1.png" alt="原理"></p><hr><h2 id="从简单的TCP-echo-server做起"><a href="#从简单的TCP-echo-server做起" class="headerlink" title="从简单的TCP echo server做起"></a>从简单的TCP echo server做起</h2><ul><li>由于整个协议的实现较为复杂，先尝试一个简单版的</li><li>这次的测试需要用到<font color = "orange"><strong>nc</strong></font>命令，所以我们先配置好环境<ol><li>在<a href="https://eternallybored.org/misc/netcat/">官方网站</a>下载netcat</li><li>将包含<strong>netcat.exe</strong>的文件夹添加到系统变量<strong>Path</strong>中</li><li>这里使用<strong>GoLand</strong>的powershell终端，因此还需要再手动添加路径<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$env:PATH</span> += <span class="string">&quot;;C:\path\to\nc&quot;</span></span><br></pre></td></tr></table></figure>   用你的路径替换掉<strong>path\to\nc</strong></li></ol></li><li>代码如下<img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1731742440/echo_y25md7.jpg" alt="echo server"><ul><li>行9-22 定义函数<strong>process</strong>处理客户端<em><strong>conn</strong></em>发来的数据<ul><li>行10 调用结束后关闭连接防止数据泄露</li><li>行12-20 创建死循环持续读取数据</li><li>行17 将读取到的数据用<strong>Write</strong>函数发送回客户端(需要用[]byte{}切片形式)</li></ul></li><li>行25 用<strong>net.Listen</strong>启动tcp服务器，并用<strong>server</strong>监听127.0.0.1:1080</li><li>行30 将客户端连接放至<strong>client</strong></li><li>行35 用<strong>go</strong>关键字创建一个goroutine并行执行函数</li></ul></li><li>运行代码，<img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1731917987/%E6%B5%8B%E8%AF%95%E6%9C%8D%E5%8A%A1%E5%99%A8_fighw1.jpg" alt="测试"><br>  运行成功</li></ul><hr><h2 id="实现认证阶段"><a href="#实现认证阶段" class="headerlink" title="实现认证阶段"></a>实现认证阶段</h2><ul><li><p>协议的第一步：处理客户端与代理服务器的认证</p></li><li><p>首先声明一些常量，这些常量和我们的协议有关，<img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1731931605/%E5%AE%9A%E4%B9%89%E5%B8%B8%E9%87%8F_lqvvto.jpg" alt="常量"></p><ul><li>行11 socks5Ver存储协议版本号<strong>0x05</strong></li><li>行12 cmdBind存储一个SOCKS5请求命令<strong>0x01</strong>代表“Bind”</li><li>行13-15 表示IP地址类型IPv4<strong>0x01</strong>，主机<strong>0x03</strong>，IPv6<strong>0x04</strong></li></ul></li><li><p>我们不再需要之前的死循环，而是改用一个<strong>auth</strong>函数处理输入，改写后的<strong>process</strong>如下，<img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1731931606/%E6%94%B9%E5%86%99process_k2qzph.jpg" alt="process"></p><ul><li>行20 调用<strong>auth</strong>函数处理<em><strong>conn</strong></em></li><li>行21 如果返回错误，打印日志，**conn.RemoteAddr()**返回当前连接的地址</li><li>看到26行的:bulb:了吗，像不像现在的你头上冒出来的那个？</li></ul></li><li><p>然后是重头戏<strong>auth</strong>，首先我们要明确SOCKS5采用固定顺序协议，服务器会按序发送<strong>VER</strong>，<strong>NMETHODS</strong>，<strong>METHODS</strong>三个字段，<img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1731931608/%E8%AE%A4%E8%AF%81%E9%83%A8%E5%88%86_jnhvvz.jpg" alt="auth"> </p><ul><li><p>行39 读取第一个字节即<strong>VER</strong></p></li><li><p>行46 读取第二个字节<strong>NMETHODS</strong></p></li><li><p>行50 根据<strong>NMETHODS</strong>给出的字节数创造一个对应大小的[]byte切片</p></li><li><p>行51 读入<strong>METHODS</strong>直至填满<em><strong>method</strong></em></p></li></ul></li><li><p>按照协议，我们需要返回我们使用的<strong>VER</strong>版本和认证形式<strong>0x00</strong>即不需要认证</p><ul><li>行61 将<strong>VER</strong>和<strong>0x00</strong>写回客户端</li></ul></li><li><p>我们可以试着运行一下程序，注意在powershell中curl要使用<strong>curl.exe</strong>确保调用系统命令<img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1731935231/%E5%B0%9D%E8%AF%95%E8%BF%9E%E6%8E%A5_z7wti8.jpg" alt="trying"></p></li><li><p>运行毫无疑问会出问题，毕竟我们离完成还有很长的距离，<br><img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1731935230/%E8%BF%94%E5%9B%9E_yrco10.jpg" alt="back"></p></li><li><p>不过也应该能看到<strong>auth</strong>函数的运行是没有问题的，可喜可贺</p></li></ul><hr><h2 id="实现请求阶段"><a href="#实现请求阶段" class="headerlink" title="实现请求阶段"></a>实现请求阶段</h2><ul><li>协议的第二步：读取客户端的请求，解析出目标服务器的地址，端口等并尝试建立连接</li><li>编写<strong>connect</strong>函数，先写出解析客户端请求报文的部分<img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1732259205/%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82_dy2vau.jpg" alt="处理请求"><ul><li>回复报文的格式已经给出不再赘述。这次换一种读取的方法不再读取per byte而是创建一个四个字节的切片<em><strong>buf</strong></em></li><li>行102 <strong>ReadFull</strong>读取直至切片被填满</li><li>行106 从前四个字节中切出<strong>VER</strong>，<strong>CMD</strong>，<strong>ATYP</strong>用于检验</li></ul></li><li>处理目标地址类型，<img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1732261774/%E5%A4%84%E7%90%86%E5%8D%8F%E8%AE%AE_p2xowr.jpg" alt="处理地址"><ul><li>行119-124 IPV4情况，会返回固定四个字节的长度，直接使用<strong>buf</strong>读取，把IP地址打印到<em><strong>addr</strong></em>里去</li><li>行125-135 域名情况，先返回域名长度再给出地址，与先前的<strong>METHOD</strong>类似</li><li>行136-137 偷个懒，IPV6不常见</li></ul></li><li>处理端口数据，<img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1732262870/%E5%A4%84%E7%90%86%E7%AB%AF%E5%8F%A3_xbgwcx.jpg" alt="处理端口"><ul><li>行141 死马当牛马用，用切片方式再次填充<strong>buf</strong>的前两个字节</li><li>行145 按^大端字节序（SOCKS5要求）解析字节切片为无符号十六位整数作为端口号填入<em><strong>port</strong></em></li></ul></li><li>按照协议代理服务器需要返回一个响应报文，<img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1732263050/%E8%BF%94%E5%9B%9E%E6%8A%A5%E6%96%87_hiniu4.jpg" alt="返回报文"><ul><li>必要的返回并没有多少，基本都写在注释里了:thumbsup:</li></ul></li><li>同样在<strong>process</strong>中添加对<strong>connect</strong>的调用，<img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1732263746/process_wkrsbb.jpg" alt="process"></li><li>这样基本就完成了请求部分，离成为王仍需一步</li></ul><hr><h2 id="实现relay"><a href="#实现relay" class="headerlink" title="实现relay"></a>实现relay</h2><ul><li>和代理服务器建立TCP连接，双向转换数据</li><li>让我们回到<strong>connect</strong>中去，<img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1732264055/%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5_hio54l.jpg" alt="建立连接"><ul><li>行147 用net包的<strong>Dial</strong>函数建立连接</li><li>行151 函数调用结束后关闭连接</li></ul></li><li>然后实现数据交换，这里使用的是io库的<strong>Copy</strong>函数，这个函数会从一个只读<strong>reader</strong>里拷贝数据到可写<strong>writer</strong>中<img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1732264420/%E6%95%B0%E6%8D%AE%E4%BA%A4%E6%8D%A2_ilkrnh.jpg" alt="数据交换"><ul><li>行172-179 并行执行两个goroutine，双向转换数据<ul><li>由于goroutine迅速执行，若不采取措施函数将很快返回<strong>nil</strong>，而我们需要任何一方不在发送数据后结束，这里的解决方案是context包的<strong>WithCancel</strong>函数，这个函数创建一个ctx上下文，直到一个<strong>cancel</strong>被执行时结束所有内部的goroutine</li></ul></li><li>行181 阻塞外层函数的进行，直到ctx结束再返回<strong>nil</strong></li></ul></li><li>让我们试着curl一下，<img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1732265966/%E6%9C%80%E7%BB%88_n3awf4.jpg" alt="try"></li><li>这样就完成了</li><li>想要在Chrome浏览器玩的话需要先安装一个SwitchyOmega插件，<img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1732266173/%E7%BD%91%E9%A1%B5_ojw8ss.jpg" alt="插件"><ul><li>选择新建情景模式然后填入服务器属性，在插件里选择应用，这样你访问的新界面就会通过你完成的SOCKS5代理服务器</li><li>妈妈再也不用担心我的IP地址暴露啦</li></ul></li></ul><hr><p>由于这次的代码还挺长的，在下方给出完整代码供参考</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/binary&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> socks5Ver = <span class="number">0x05</span></span><br><span class="line"><span class="keyword">const</span> cmdBind = <span class="number">0x01</span></span><br><span class="line"><span class="keyword">const</span> atypeIPV4 = <span class="number">0x01</span></span><br><span class="line"><span class="keyword">const</span> atypeHOST = <span class="number">0x03</span></span><br><span class="line"><span class="keyword">const</span> atypeIPV6 = <span class="number">0x04</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">reader := bufio.NewReader(conn)</span><br><span class="line">err := auth(reader, conn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;client %v auth failed: %v&quot;</span>, conn.RemoteAddr(), err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">err = connect(reader, conn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;client %v auth failed: %v&quot;</span>, conn.RemoteAddr(), err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">auth</span><span class="params">(reader *bufio.Reader, conn net.Conn)</span></span> (err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// +-----+----------+----------+</span></span><br><span class="line"><span class="comment">// | VER | NMETHODS | METHODS  |</span></span><br><span class="line"><span class="comment">// +-----+----------+----------+</span></span><br><span class="line"><span class="comment">// |  1  |     1    | 1 to 255 |</span></span><br><span class="line"><span class="comment">// +-----+----------+----------+</span></span><br><span class="line"><span class="comment">// VER: 协议版本，socks5为0x05</span></span><br><span class="line"><span class="comment">// NMETHODS: 支持认证的方法数</span></span><br><span class="line"><span class="comment">//METHODS: 对应NMETHODS，为METHODS的字节数。一些RFC预定义如下</span></span><br><span class="line"><span class="comment">// X&#x27;00&#x27; NO AUTHENTICATION REQUIRED</span></span><br><span class="line"><span class="comment">// X&#x27;02&#x27; USERNAME/PASSWORD</span></span><br><span class="line">ver, err := reader.ReadByte()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read ver failed: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ver != socks5Ver &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;not supported ver:%v&quot;</span>, ver)</span><br><span class="line">&#125;</span><br><span class="line">methodSize, err := reader.ReadByte()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read methodSize failed: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">method := <span class="built_in">make</span>([]<span class="type">byte</span>, methodSize)</span><br><span class="line">_, err = io.ReadFull(reader, method)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read method failed: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">&quot;ver&quot;</span>, ver, <span class="string">&quot;method&quot;</span>, method)</span><br><span class="line"><span class="comment">// +-----+--------+</span></span><br><span class="line"><span class="comment">// | VER | METHOD |</span></span><br><span class="line"><span class="comment">// +-----+--------+</span></span><br><span class="line"><span class="comment">// |  1  |   1    |</span></span><br><span class="line"><span class="comment">// +-----+--------+</span></span><br><span class="line">_, err = conn.Write([]<span class="type">byte</span>&#123;socks5Ver, <span class="number">0x00</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;write failed: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">server, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;127.0.0.1:1080&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">client, err := server.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Accept failed %v&quot;</span>, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> process(client)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">connect</span><span class="params">(reader *bufio.Reader, conn net.Conn)</span></span> (err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// +----+-----+-------+------+----------+----------+</span></span><br><span class="line"><span class="comment">// |VER | CMD |  RSV  | ATYP | DST.ADDR | DST.PORT |</span></span><br><span class="line"><span class="comment">// +----+-----+-------+------+----------+----------+</span></span><br><span class="line"><span class="comment">// | 1  |  1  | X&#x27;00&#x27; |  1   | Variable |    2     |</span></span><br><span class="line"><span class="comment">// +----+-----+-------+------+----------+----------+</span></span><br><span class="line"><span class="comment">// VER 版本号，socks5的值为0x05</span></span><br><span class="line"><span class="comment">// CMD 0x01表示CONNECT请求</span></span><br><span class="line"><span class="comment">// RSV 保留字段，值为0x00</span></span><br><span class="line"><span class="comment">// ATYP 目标地址类型，DST.ADDR的数据对应这个字段的类型。</span></span><br><span class="line"><span class="comment">//   0x01表示IPv4地址，DST.ADDR为4个字节</span></span><br><span class="line"><span class="comment">//   0x03表示域名，DST.ADDR是一个可变长度的域名</span></span><br><span class="line"><span class="comment">// DST.ADDR 一个可变长度的值</span></span><br><span class="line"><span class="comment">// DST.PORT 目标端口，固定2个字节</span></span><br><span class="line"></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">4</span>)</span><br><span class="line">_, err = io.ReadFull(reader, buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read header failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">ver, cmd, atyp := buf[<span class="number">0</span>], buf[<span class="number">1</span>], buf[<span class="number">3</span>]</span><br><span class="line"><span class="keyword">if</span> ver != socks5Ver &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;not supported ver:%v&quot;</span>, ver)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> cmd != cmdBind &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;not supported cmd:%v&quot;</span>, cmd)</span><br><span class="line">&#125;</span><br><span class="line">addr := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">switch</span> atyp &#123;</span><br><span class="line"><span class="keyword">case</span> atypeIPV4:</span><br><span class="line">_, err = io.ReadFull(reader, buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read atyp failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">addr = fmt.Sprintf(<span class="string">&quot;%d.%d.%d.%d&quot;</span>, buf[<span class="number">0</span>], buf[<span class="number">1</span>], buf[<span class="number">2</span>], buf[<span class="number">3</span>])</span><br><span class="line"><span class="keyword">case</span> atypeHOST:</span><br><span class="line">hostSize, err := reader.ReadByte()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read hostSize failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">host := <span class="built_in">make</span>([]<span class="type">byte</span>, hostSize)</span><br><span class="line">_, err = io.ReadFull(reader, host)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read host failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">addr = <span class="type">string</span>(host)</span><br><span class="line"><span class="keyword">case</span> atypeIPV6:</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;IPv6: no supported yet&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;invalid atyp&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">_, err = io.ReadFull(reader, buf[:<span class="number">2</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read port failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">port := binary.BigEndian.Uint16(buf[:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">dest, err := net.Dial(<span class="string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="string">&quot;%v:%v&quot;</span>, addr, port))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;dial dst failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> dest.Close()</span><br><span class="line">log.Println(<span class="string">&quot;dial&quot;</span>, addr, port)</span><br><span class="line"></span><br><span class="line"><span class="comment">// +----+-----+-------+------+----------+----------+</span></span><br><span class="line"><span class="comment">// |VER | REP |  RSV  | ATYP | BND.ADDR | BND.PORT |</span></span><br><span class="line"><span class="comment">// +----+-----+-------+------+----------+----------+</span></span><br><span class="line"><span class="comment">// | 1  |  1  | X&#x27;00&#x27; |  1   | Variable |    2     |</span></span><br><span class="line"><span class="comment">// +----+-----+-------+------+----------+----------+</span></span><br><span class="line"><span class="comment">// VER socks版本，这里为0x05</span></span><br><span class="line"><span class="comment">// REP Relay field,内容取值如下 X’00’ succeeded</span></span><br><span class="line"><span class="comment">// RSV 保留字段</span></span><br><span class="line"><span class="comment">// ATYPE 地址类型</span></span><br><span class="line"><span class="comment">// BND.ADDR 服务绑定的地址</span></span><br><span class="line"><span class="comment">// BND.PORT 服务绑定的端口DST.PORT</span></span><br><span class="line">_, err = conn.Write([]<span class="type">byte</span>&#123;<span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;write failed: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">_, _ = io.Copy(dest, reader)</span><br><span class="line">cancel()</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">_, _ = io.Copy(conn, dest)</span><br><span class="line">cancel()</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">&lt;-ctx.Done()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>*今日推荐：好累不想推荐</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>在线词典的实现</title>
      <link href="/2024/11/14/%E5%9C%A8%E7%BA%BF%E8%AF%8D%E5%85%B8%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2024/11/14/%E5%9C%A8%E7%BA%BF%E8%AF%8D%E5%85%B8%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="在线词典的实现"><a href="#在线词典的实现" class="headerlink" title="在线词典的实现"></a>在线词典的实现</h1><blockquote><p>使用Go发送http请求，解析JSON，使用代码生成提高开发效率的实践</p></blockquote><h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><ul><li>在我们输入词语，点击翻译，网页返回翻译的过程背后，网站究竟做了什么？:flushed:</li><li>让我们用开发者工具解剖背后的实现过程<br>右键网页，选择<strong>检查</strong>，在弹出的侧栏里选中<strong>Network</strong>，然后尝试输入一个单词，此时开发者工具会弹出一系列请求,选中<strong>dict</strong>，<br><img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1731482675/%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7_hfwhqr.png" alt="开发者工具"><br>我们看到<strong>Headers</strong>里表示这是一个<strong>POST</strong>请求。进一步点开<strong>Payload</strong>，<br><img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1731483179/%E8%BD%BD%E8%8D%B7_ncn6ac.png" alt="载荷"><br>发出的JSON里含有我们的请求，比如<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>trans_type<span class="punctuation">:</span> <span class="string">&quot;en2zh&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>代表了我们想将英语转换为中文</li></ul><hr><h2 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h2><ul><li><p>使用<a href="https://curlconverter.com/go/">代码生成工具</a>快速生成请求</p><ol><li>复制网站的curl<br> <img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1731484185/%E5%A4%8D%E5%88%B6curl_d2epz9.jpg" alt="复制curl"></li><li>将复制到的curl粘贴到工具的输入栏里，<br> <img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1731484413/%E7%94%9F%E6%88%90s_uklf2y.jpg" alt="生成"><br> 看到下方已经给出了完整的命令</li></ol><ul><li>对命令的解释<br><img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1731484780/%E8%AF%B7%E6%B1%82%E8%A7%A3%E9%87%8A_sh6byy.jpg" alt="解释"></li><li>行14 创建了一个使用POST方法向对应url发送的请求存储在<em><strong>req</strong></em></li><li>行18-36 设置请求头</li><li>行37 发起请求，获取输入流放在<em><strong>resp</strong></em></li><li>行41^ 结束输入流，防止数据泄露</li><li>行42 将Body部分转成byte数据存入<em><strong>bodyText</strong></em></li></ul><ol start="3"><li>运行代码，应当能看到返回的JSON数据，<br><img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1731493643/%E7%BB%93%E6%9E%9C_syvvvv.jpg" alt="结果"></li></ol></li><li><p>由于我们需要可变的请求，而生成的代码只能生成特定的请求，我们对生成部分代码做更改<br><img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1731560977/%E6%96%B0%E7%9A%84%E7%94%9F%E6%88%90_zdn8ng.jpg" alt="新的生成"></p><ul><li>定义结构体</li><li>行18 初始化一个request结构体</li><li>行19 将request转化成byte数组</li><li>行23 把byte数组转化成data</li></ul></li></ul><hr><ul><li>使用<a href="https://lhxserver.top/json2go">工具</a>生成结构体<ol><li>我们用同样的办法找到网站的返回值<img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1731587914/%E8%BF%94%E5%9B%9E_sgbgps.jpg" alt="返回"></li><li>理论上可以手搓结构体然后UnMarshall——超累的，Ctrl+C然后打开工具（视情况可能要动用第三方工具copy）<img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1731587982/%E8%BD%AC%E6%8D%A2_jctqrc.jpg" alt="转换"><br>此处可以直接用嵌套</li><li>修改处理输入流的部分<img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1731582649/%E5%A4%84%E7%90%86%E6%B5%81_nsjjpk.jpg" alt="处理流"><ul><li>行79 将返回的body部分反序列化并填入<em><strong>dictResponse</strong></em>，注意需要**&amp;**才能写入</li></ul></li><li>运行代码，应当能看到比上一次长——这么多的返回<img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1731583157/%E8%BF%94%E5%9B%9E_orj2iy.jpg" alt="返回"></li></ol></li></ul><hr><ul><li>修改输入输出部分，完善整个函数<ul><li>修改输出部分为需要的信息<img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1731588415/%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F_stkbvw.jpg" alt="输出格式"></li><li>更改函数名为<strong>query</strong>，把硬输入<em><strong>“good”</strong></em>换成<em><strong>word</strong></em><img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1731589188/%E6%9B%B4%E6%94%B9%E5%87%BD%E6%95%B0%E5%90%8D_pct8vm.jpg" alt="更改函数名"></li><li>最后add一个优雅的main函数<img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1731589226/%E4%B8%BB%E5%87%BD%E6%95%B0_rbv022.jpg" alt="主函数"><ul><li>行72 判断除了函数名有无有效输入</li></ul></li><li>运行试试<img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1731590634/%E7%BB%93%E6%9E%9C_anlmtv.jpg" alt="结果"><br>成功喵:cat:</li></ul></li></ul><hr><p>通过提供api和正确的结构体,我们就能实现自动向网站发送请求并处理返回的数据.<br>会不会有更有意思的玩法呢?</p><p><em>今日推荐:没有考试的水课</em></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Gin的食用方法</title>
      <link href="/2024/09/30/Gin%E7%9A%84%E9%A3%9F%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2024/09/30/Gin%E7%9A%84%E9%A3%9F%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Gin的食用方法"><a href="#Gin的食用方法" class="headerlink" title="Gin的食用方法"></a>Gin的食用方法</h1><blockquote><p>创建Web的实操</p></blockquote><h2 id="首先，为什么是Gin"><a href="#首先，为什么是Gin" class="headerlink" title="首先，为什么是Gin"></a>首先，为什么是<em>Gin</em></h2><ul><li>被安排了开发平台的作业？</li><li>厌倦于在IDE里和控制台Date？</li><li>希望让作业变得高大上？</li><li>使用Gin作为头疼圆舞曲的终止符，创建属于你的Web</li></ul><hr><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ol><li>一款IDE，<a href="https://visualstudio.microsoft.com/zh-hans/downloads/"><strong>VSCode</strong></a>（万能款）&#x2F;<a href="https://www.jetbrains.com/go/"><strong>GoLand</strong></a>（专业款）or WHATEVER u want</li><li>恰到好处的Go语言水平 &#x3D;&gt; <a href="tour.go-zh.org">我要学!</a></li></ol><ul><li>让我们开始吧！</li></ul><hr><h2 id="简单的开始"><a href="#简单的开始" class="headerlink" title="简单的开始"></a>简单的开始</h2><ol><li>在你想要的位置创建文件夹用于存放你的代码（如D:&#x2F;GO）</li><li>创建你的 go 项目<br><img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1726062096/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE_lcpfqz.png" alt="创建项目"></li><li>用智慧的眼睛找到<strong>main.go</strong>，输入检测代码<br><img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1726095401/%E6%A3%80%E9%AA%8C_k7rj7i.png" alt="检验"></li><li>对命令行使出下载安装Gin吧！<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get <span class="literal">-u</span> github.con/<span class="built_in">gin</span><span class="literal">-gonic</span>/<span class="built_in">gin</span></span><br></pre></td></tr></table></figure>  敬请见证<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">D:\GO&gt;go get <span class="literal">-u</span> github.com/<span class="built_in">gin</span><span class="literal">-gonic</span>/<span class="built_in">gin</span></span><br><span class="line">go: downloading github.com/<span class="built_in">gin</span><span class="literal">-gonic</span>/<span class="built_in">gin</span> v1.<span class="number">10.0</span></span><br><span class="line">go: downloading golang.org/x/net v0.<span class="number">25.0</span></span><br><span class="line">go: downloading github.com/<span class="built_in">gin</span><span class="literal">-contrib</span>/sse v0.<span class="number">1.0</span></span><br><span class="line">go: downloading github.com/mattn/go<span class="literal">-isatty</span> v0.<span class="number">0.20</span></span><br><span class="line">go: downloading google.golang.org/protobuf v1.<span class="number">34.1</span></span><br><span class="line">go: downloading github.com/ugorji/go/codec v1.<span class="number">2.12</span></span><br><span class="line">go: downloading gopkg.in/yaml.v3 v3.<span class="number">0.1</span></span><br><span class="line">go: downloading github.com/bytedance/sonic v1.<span class="number">11.6</span></span><br><span class="line">go: downloading github.com/goccy/go<span class="literal">-json</span> v0.<span class="number">10.2</span></span><br><span class="line">go: downloading github.com/pelletier/go<span class="literal">-toml</span>/v2 v2.<span class="number">2.2</span></span><br><span class="line">go: downloading github.com/json<span class="literal">-iterator</span>/go v1.<span class="number">1.12</span></span><br><span class="line">go: downloading github.com/go<span class="literal">-playground</span>/validator/v10 v10.<span class="number">20.0</span></span><br><span class="line">go: downloading golang.org/x/sys v0.<span class="number">20.0</span></span><br><span class="line">go: downloading github.com/modern<span class="literal">-go</span>/reflect2 v1.<span class="number">0.2</span></span><br><span class="line">go: downloading github.com/modern<span class="literal">-go</span>/concurrent v0.<span class="number">0.0</span><span class="literal">-20180306012644-bacd9c7ef1dd</span></span><br><span class="line">go: downloading github.com/ugorji/go v1.<span class="number">2.12</span></span><br><span class="line">go: downloading github.com/bytedance/sonic v1.<span class="number">12.2</span></span><br><span class="line">go: downloading github.com/pelletier/go<span class="literal">-toml</span> v1.<span class="number">9.5</span></span><br><span class="line">go: downloading golang.org/x/net v0.<span class="number">29.0</span></span><br><span class="line">go: downloading github.com/pelletier/go<span class="literal">-toml</span>/v2 v2.<span class="number">2.3</span></span><br><span class="line">go: downloading github.com/goccy/go<span class="literal">-json</span> v0.<span class="number">10.3</span></span><br><span class="line">go: downloading github.com/cloudwego/base64x v0.<span class="number">1.4</span></span><br><span class="line">go: downloading golang.org/x/arch v0.<span class="number">8.0</span></span><br><span class="line">go: downloading github.com/go<span class="literal">-playground</span>/validator/v10 v10.<span class="number">22.1</span></span><br><span class="line">go: downloading github.com/go<span class="literal">-playground</span>/validator v9.<span class="number">31.0</span>+incompatible</span><br><span class="line">go: downloading github.com/twitchyliquid64/golang<span class="literal">-asm</span> v0.<span class="number">15.1</span></span><br><span class="line">go: downloading github.com/bytedance/sonic/loader v0.<span class="number">1.1</span></span><br><span class="line">go: downloading google.golang.org/protobuf v1.<span class="number">34.2</span></span><br><span class="line">go: downloading github.com/klauspost/cpuid/v2 v2.<span class="number">2.7</span></span><br><span class="line">go: downloading golang.org/x/text v0.<span class="number">15.0</span></span><br><span class="line">go: downloading golang.org/x/crypto v0.<span class="number">23.0</span></span><br><span class="line">go: downloading github.com/gabriel<span class="literal">-vasile</span>/mimetype v1.<span class="number">4.3</span></span><br><span class="line">go: downloading github.com/go<span class="literal">-playground</span>/universal<span class="literal">-translator</span> v0.<span class="number">18.1</span></span><br><span class="line">go: downloading github.com/leodido/go<span class="literal">-urn</span> v1.<span class="number">4.0</span></span><br><span class="line">go: downloading golang.org/x/sys v0.<span class="number">25.0</span></span><br><span class="line">go: downloading github.com/go<span class="literal">-playground</span>/locales v0.<span class="number">14.1</span></span><br><span class="line">go: downloading golang.org/x/arch v0.<span class="number">10.0</span></span><br><span class="line">go: downloading github.com/bytedance/sonic/loader v0.<span class="number">2.0</span></span><br><span class="line">go: downloading github.com/klauspost/cpuid/v2 v2.<span class="number">2.8</span></span><br><span class="line">go: downloading github.com/klauspost/cpuid v1.<span class="number">3.1</span></span><br><span class="line">go: downloading github.com/cloudwego/iasm v0.<span class="number">2.0</span></span><br><span class="line">go: downloading golang.org/x/crypto v0.<span class="number">27.0</span></span><br><span class="line">go: downloading golang.org/x/text v0.<span class="number">18.0</span></span><br><span class="line">go: downloading github.com/gabriel<span class="literal">-vasile</span>/mimetype v1.<span class="number">4.5</span></span><br><span class="line">go: added github.com/bytedance/sonic v1.<span class="number">12.2</span></span><br><span class="line">go: added github.com/bytedance/sonic/loader v0.<span class="number">2.0</span></span><br><span class="line">go: added github.com/cloudwego/base64x v0.<span class="number">1.4</span></span><br><span class="line">go: added github.com/cloudwego/iasm v0.<span class="number">2.0</span></span><br><span class="line">go: added github.com/gabriel<span class="literal">-vasile</span>/mimetype v1.<span class="number">4.5</span></span><br><span class="line">go: added github.com/<span class="built_in">gin</span><span class="literal">-contrib</span>/sse v0.<span class="number">1.0</span></span><br><span class="line">go: added github.com/<span class="built_in">gin</span><span class="literal">-gonic</span>/<span class="built_in">gin</span> v1.<span class="number">10.0</span></span><br><span class="line">go: added github.com/go<span class="literal">-playground</span>/locales v0.<span class="number">14.1</span></span><br><span class="line">go: added github.com/go<span class="literal">-playground</span>/universal<span class="literal">-translator</span> v0.<span class="number">18.1</span></span><br><span class="line">go: added github.com/go<span class="literal">-playground</span>/validator/v10 v10.<span class="number">22.1</span></span><br><span class="line">go: added github.com/goccy/go<span class="literal">-json</span> v0.<span class="number">10.3</span></span><br><span class="line">go: added github.com/json<span class="literal">-iterator</span>/go v1.<span class="number">1.12</span></span><br><span class="line">go: added github.com/klauspost/cpuid/v2 v2.<span class="number">2.8</span></span><br><span class="line">go: added github.com/leodido/go<span class="literal">-urn</span> v1.<span class="number">4.0</span></span><br><span class="line">go: added github.com/mattn/go<span class="literal">-isatty</span> v0.<span class="number">0.20</span></span><br><span class="line">go: added github.com/modern<span class="literal">-go</span>/concurrent v0.<span class="number">0.0</span><span class="literal">-20180306012644-bacd9c7ef1dd</span></span><br><span class="line">go: added github.com/modern<span class="literal">-go</span>/reflect2 v1.<span class="number">0.2</span></span><br><span class="line">go: added github.com/pelletier/go<span class="literal">-toml</span>/v2 v2.<span class="number">2.3</span></span><br><span class="line">go: added github.com/twitchyliquid64/golang<span class="literal">-asm</span> v0.<span class="number">15.1</span></span><br><span class="line">go: added github.com/ugorji/go/codec v1.<span class="number">2.12</span></span><br><span class="line">go: added golang.org/x/arch v0.<span class="number">10.0</span></span><br><span class="line">go: added golang.org/x/crypto v0.<span class="number">27.0</span></span><br><span class="line">go: added golang.org/x/net v0.<span class="number">29.0</span></span><br><span class="line">go: added golang.org/x/sys v0.<span class="number">25.0</span></span><br><span class="line">go: added golang.org/x/text v0.<span class="number">18.0</span></span><br><span class="line">go: added google.golang.org/protobuf v1.<span class="number">34.2</span></span><br><span class="line">go: added gopkg.in/yaml.v3 v3.<span class="number">0.1</span></span><br></pre></td></tr></table></figure></li><li>尝试搭建一个测试Web<br><img src="https://res.cloudinary.com/dzcjdspdy/image/upload/v1726062953/demo_kthsso.png" alt="demo"><blockquote><p>最后一行表明你的程序正在监听端口8080</p></blockquote></li></ol><p>  在gitbash中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 127.0.0.1:8080/ping</span><br></pre></td></tr></table></figure><p>  来命令你的服务器给你发送一段消息</p><p>  在 <a href="http://localhost:8080/ping">http://localhost:8080/ping</a> 看到了**{“message”:”pong”}**？<br>  你的服务器响应了你！</p><hr><p>关于服务器的写法留到下一次吧</p><p><em>今日推荐：不会生锈的大脑</em></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>scoop-download</title>
      <link href="/2024/08/31/scoop-download/"/>
      <url>/2024/08/31/scoop-download/</url>
      
        <content type="html"><![CDATA[<h1 id="安装使用scoop的教程"><a href="#安装使用scoop的教程" class="headerlink" title="安装使用scoop的教程"></a>安装<del>使用</del>scoop的教程</h1><details class="toggle" ><summary class="toggle-button" style="">小小的私心</summary><div class="toggle-content"><p>没有千兆网搞这个太痛苦了</p></div></details><p><a href="https://chatgpt.com/">什么是scoop</a></p><h2 id="关于安装"><a href="#关于安装" class="headerlink" title="关于安装"></a>关于安装</h2><ol><li>如果电脑安装软件不需要管理员许可，请先更改<strong>组策略</strong>，不然后果自负</li><li>使用<strong>win</strong>+<strong>R</strong>输入<em>powershell</em>，运行如下<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">iwr</span> <span class="literal">-useb</span> get.scoop.sh|<span class="built_in">iex</span></span><br></pre></td></tr></table></figure></li><li>如果输出<strong>Scoop was installed successfully</strong>，恭喜你不用去烦gpt了</li></ol><h2 id="scoop的简单应用"><a href="#scoop的简单应用" class="headerlink" title="scoop的简单应用"></a>scoop的简单应用</h2><p> 安装软件（示例<strong>everything</strong>）<br> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install everything</span><br></pre></td></tr></table></figure><br> 卸载软件（同样示例<strong>everything</strong>）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop uninstall everything</span><br></pre></td></tr></table></figure><p> 查找可用软件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop search</span><br></pre></td></tr></table></figure><h2 id="更改下载源的方式"><a href="#更改下载源的方式" class="headerlink" title="更改下载源的方式"></a>更改下载源的方式</h2><blockquote><p>供网速可怜如我的人使用</p></blockquote><ol><li>打开<em>powershell</em></li><li>更换scoop的repo地址<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop config SCOOP_REPO <span class="string">&quot;https://gitee.com/scoop-installer/scoop&quot;</span></span><br></pre></td></tr></table></figure></li><li>拉取新库地址<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop update</span><br></pre></td></tr></table></figure></li></ol><h4 id="TIPS-更改组策略的方式"><a href="#TIPS-更改组策略的方式" class="headerlink" title="TIPS:更改组策略的方式"></a>TIPS:更改组策略的方式</h4><ol><li>打开Windows设置</li><li>找到<strong>编辑组策略</strong></li><li>依次选取<strong>安全设置</strong>，<strong>本地策略</strong>，<strong>安全选项</strong></li><li>在右侧启用<strong>用于内置管理员账户的管理员批准模式</strong></li><li>记得重启</li></ol><p><em>今日推荐：花椒锅巴</em></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/08/31/hello-world/"/>
      <url>/2024/08/31/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
